%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "functions.h"
#include "y.tab.h"

int yylex (void);
void yyerror(char* s);

node* myprogram; // root node

%}

%union {
    char *id;
    node_t *node;
}

%token INTEGER DOUBLE CHARACTER LET IN END WRITE // faltam os tokens restantes
%token <id> ID

%type <node> Program
%type <node> vardeclist
%type <node> vardec
%type <node> statementlist
%type <node> statement


%%

/*
Program âˆ’â†’ PACKAGE ID SEMICOLON Declarations
Declarations âˆ’â†’ {VarDeclaration SEMICOLON | FuncDeclaration SEMICOLON}
VarDeclaration âˆ’â†’ VAR VarSpec
VarDeclaration âˆ’â†’ VAR LPAR VarSpec SEMICOLON RPAR
VarSpec âˆ’â†’ ID {COMMA ID} Type
Type âˆ’â†’ INT | FLOAT32 | BOOL | STRING
FuncDeclaration âˆ’â†’ FUNC ID LPAR [Parameters] RPAR [Type] FuncBody
Parameters âˆ’â†’ ID Type {COMMA ID Type}
FuncBody âˆ’â†’ LBRACE VarsAndStatements RBRACE
VarsAndStatements âˆ’â†’ VarsAndStatements [VarDeclaration | Statement] SEMICOLON | 
Statement âˆ’â†’ ID ASSIGN Expr
Statement âˆ’â†’ LBRACE {Statement SEMICOLON} RBRACE
Statement âˆ’â†’ IF Expr LBRACE {Statement SEMICOLON} RBRACE [ELSE LBRACE {Statement
SEMICOLON} RBRACE]
Statement âˆ’â†’ FOR [Expr] LBRACE {Statement SEMICOLON} RBRACE
Statement âˆ’â†’ RETURN [Expr]
Statement âˆ’â†’ FuncInvocation | ParseArgs
Statement âˆ’â†’ PRINT LPAR (Expr | STRLIT) RPAR
ParseArgs âˆ’â†’ ID COMMA BLANKID ASSIGN PARSEINT LPAR CMDARGS LSQ Expr RSQ RPAR
FuncInvocation âˆ’â†’ ID LPAR [Expr {COMMA Expr}] RPAR
Expr âˆ’â†’ Expr (OR | AND) Expr
Expr âˆ’â†’ Expr (LT | GT | EQ | NE | LE | GE) Expr
Expr âˆ’â†’ Expr (PLUS | MINUS | STAR | DIV | MOD) Expr
Expr âˆ’â†’ (NOT | MINUS | PLUS) Expr
Expr âˆ’â†’ INTLIT | REALLIT | ID | FuncInvocation | LPAR Expr RPAR
*/

program: LET vardeclist IN statementlist END
                                        {$$=myprogram=insert_program($2, $4);} 
    ;

vardeclist: /*empty*/                   {$$=NULL;}
    | vardeclist vardec                 {$$=insert_vardec_list($1, $2);}
    ;

vardec: INTEGER IDENTIFIER              {$$=insert_integer_dec($2);}
    | CHARACTER IDENTIFIER              {$$=insert_character_dec($2);}
    | DOUBLE IDENTIFIER                 {$$=insert_double_dec($2);}
    ;

statementlist: /*empty*/                {$$=NULL;}
    | statementlist statement           {$$=insert_statement_list($1, $2);}
    ;

statement: WRITE IDENTIFIER             {$$=insert_write_statement($2);}
    ;

%%

void yyerror(char *msg) {
    printf("%s", msg);
}

